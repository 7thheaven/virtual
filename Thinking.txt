20140417

完成XenServer下的移植。需要明确下一步的目标。

物理机的故障注入，一般是对cpu、内存、磁盘、寄存器等硬件进行，
可以通过软件模拟达到硬件故障的效果，方式多样：
面向函数的系统级方式、使用API的用户级方式、汇编直接访问硬件等。

在虚拟机上同样可以进行物理机的那些故障注入，
但是作为一个云评测工具，应该面向的是整个的云环境，
在进行单机故障注入的时候可以且只可以评测对故障的隔离性，
进行环境层次的故障注入更有意义，
比如同一宿主物理机下的不同虚拟机之间的非法内存访问（可以通过VMM故障实现），
更应该考验的是作为云环境核心的虚拟化管理能力，也就是作为Hypervisor的VMM，

在VMM的宿主机上进行传统的物理机故障测试？可以考察单点故障问题。

对VMM的虚拟化管理功能进行故障测试？

破坏原有功能是否有意义？只是单纯地进行破坏可能不会有意义，进行有目的性的破坏，比如VM页表篡改，可能导致VM之间非法访问内存，这类是有意义的。

非破坏性的测试？检测调用接口的健壮性（如参数合法性判断）？生成大量随机参数进行测试？
结果很可能会取决于调用的层次，

如果目标是底层调用，即通常只会被系统自身代码调用的接口，很可能会发现健壮性很差，因为不会被随意调用，系统自身使用时往往是合理的，不需要判断参数（或者说上层已经判断过了，保证在调用底层函数时参数是合法的）。

我也是通过这个特性（底层调用未对参数合理性进行判断，或者难以进行判断，如页表的地址等运行时才知道是否合理的信息），来进行一些故障实现，如篡改VM页表信息。

如果目标换成上层调用，由于是可能常被用户使用的调用，所以通常系统会对参数的合法性进行判断，也就是有一定的健壮性。
但是对这些参数健壮性的测试，可以通过阅读调用的源代码来完全预测出结果，这样是否有意义？
或者说这样的测试只对非开源系统才有意义吗？

是否还有其他的测试对象呢？排除性能等其他测试方向，仅从容错、可靠性的目标来说。暂时没想到。
或者说，是否一个系统所有的功能都是通过函数来实现的呢？
面向设备的（物理机方式故障）、面向函数调用的（系统功能故障），
是否还有其他的故障/评测目标？

暂时还没想到，如果没有的话，那么可以说只要处理了面向函数的故障即可完成所有的功能可靠性评测，
目前通过拦截/探针的方式进行，那么没有导出到符号表的函数例程怎么测试？
或者说，是否有其他方式测试函数调用？
对于系统层来说，重要的功能函数调用都存在于或者间接存在于符号表了吧？我想是的。
那么，接下来的任务可能是搞清符号表中的函数例程各自的作用？
或者是逆向考虑，对每个需要测试的功能，找到其与符号表中核心函数的关系？
也就是说是对操作系统的各调用的实现进行学习了。
若如此，为了开发一个不同系统下通用的评测工具，可能需要对类linux的系统的通用的系统功能函数做一个筛选统计，
或者直奔主题，仅针对vmm的功能函数做研究，研究一下开源的xen、kvm，非开源的vmware暂时不考虑。


20140423

上周开会中与老师讨论，说可以尝试在VMM宿主机上进行物理机的故障注入测试，然后考察硬件资源故障对虚拟化资源分配会产生什么影响，正好可以用到实验室前几辈学长留下来的物理机故障注入工具。
于是看了下之前的寄存器故障注入工具，测试的原理是在触发中断的时候，系统会保存寄存器现场到内存中，该工具修改了内存中相应的值，在系统恢复的时候，会把该值写到寄存器中。
也就是说，实际上，这个测试技术针对的层面是进程级，并不是系统级，而且是利用内存故障的原理。
这样看，似乎和我要做的东西有些偏差。
应该实现的是更底层的系统级的寄存器故障。

